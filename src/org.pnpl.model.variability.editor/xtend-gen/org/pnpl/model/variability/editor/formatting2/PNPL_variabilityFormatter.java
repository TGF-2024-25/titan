/**
 * generated by Xtext 2.35.0
 */
package org.pnpl.model.variability.editor.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.formatting2.IHiddenRegionFormatter;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;
import org.eclipse.xtext.xbase.lib.XbaseGenerated;
import org.pnpl.model.variability.editor.services.PNPL_variabilityGrammarAccess;
import variability.PresenceCondition;
import variability.UnaryExpression;
import variability.Variability;

@SuppressWarnings("all")
public class PNPL_variabilityFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private PNPL_variabilityGrammarAccess _pNPL_variabilityGrammarAccess;

  protected void _format(final Variability variability, @Extension final IFormattableDocument document) {
    EList<PresenceCondition> _presencecondition = variability.getPresencecondition();
    for (final PresenceCondition presenceCondition : _presencecondition) {
      {
        document.<PresenceCondition>format(presenceCondition);
        InputOutput.<PresenceCondition>println(document.<PresenceCondition>format(presenceCondition));
      }
    }
  }

  protected void _format(final PresenceCondition presenceCondition, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.prepend(this.textRegionExtensions.regionFor(presenceCondition).keyword("PC"), _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.prepend(this.textRegionExtensions.regionFor(presenceCondition).keyword("for"), _function_1);
    EList<EObject> _elements = presenceCondition.getElements();
    for (final EObject element : _elements) {
      final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
        it.oneSpace();
      };
      document.prepend(this.textRegionExtensions.regionFor(element).keyword(","), _function_2);
    }
    final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.prepend(this.textRegionExtensions.regionFor(presenceCondition).keyword("="), _function_3);
  }

  protected void _format(final UnaryExpression unaryExpression, @Extension final IFormattableDocument document) {
  }

  @XbaseGenerated
  public void format(final Object unaryExpression, final IFormattableDocument document) {
    if (unaryExpression instanceof XtextResource) {
      _format((XtextResource)unaryExpression, document);
      return;
    } else if (unaryExpression instanceof UnaryExpression) {
      _format((UnaryExpression)unaryExpression, document);
      return;
    } else if (unaryExpression instanceof PresenceCondition) {
      _format((PresenceCondition)unaryExpression, document);
      return;
    } else if (unaryExpression instanceof Variability) {
      _format((Variability)unaryExpression, document);
      return;
    } else if (unaryExpression instanceof EObject) {
      _format((EObject)unaryExpression, document);
      return;
    } else if (unaryExpression == null) {
      _format((Void)null, document);
      return;
    } else if (unaryExpression != null) {
      _format(unaryExpression, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(unaryExpression, document).toString());
    }
  }
}
